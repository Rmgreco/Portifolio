{"ast":null,"code":"var _jsxFileName = \"/home/usuario/projetos/sd-08-project-starwars-planets-search/src/context/PlanetsProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nconst ORDER_POSITIVE = 1;\nconst ORDER_NEGATIVE = -1;\n\nconst sortArray = (array, order) => [...array.sort((planetA, planetB) => {\n  let columnA = parseInt(planetA[order.column], 10) ? parseInt(planetA[order.column], 10) : planetA[order.column];\n  let columnB = parseInt(planetB[order.column], 10) ? parseInt(planetB[order.column], 10) : planetB[order.column];\n  if (columnA === 'unknown') columnA = Infinity;\n  if (columnB === 'unknown') columnB = Infinity;\n  if (columnA > columnB && order.sort === 'ASC') return ORDER_POSITIVE;\n  if (columnA < columnB && order.sort === 'ASC') return ORDER_NEGATIVE;\n  if (columnA > columnB && order.sort === 'DESC') return ORDER_NEGATIVE;\n  if (columnA < columnB && order.sort === 'DESC') return ORDER_POSITIVE;\n  return 0;\n})];\n\nconst initialColumns = ['rotation_period', 'orbital_period', 'diameter', 'surface_water', 'population'];\nconst filterOptions = {\n  filtrarPorNome: {\n    name: ''\n  },\n  filtrarPorNumero: [{\n    column: '',\n    comparison: '',\n    value: ''\n  }],\n  ordem: {\n    column: 'name',\n    sort: 'ASC'\n  }\n};\n\nfunction PlanetsProvider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState(filterOptions);\n  const [columns, setColumns] = useState(initialColumns);\n  useEffect(() => {\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/').then(response => response.json()).then(result => setData(result.results));\n  }, [data]);\n  useEffect(() => {\n    const {\n      filtrarPorNome: {\n        name\n      },\n      filtrarPorNumero,\n      ordem\n    } = filters;\n    filtrarPorNumero.forEach(filterValues => {\n      const {\n        column,\n        comparison,\n        value\n      } = filterValues;\n      const filter = data.filter(planet => {\n        const includesName = planet.name.toLowerCase().includes(name.toLowerCase());\n\n        switch (comparison) {\n          case 'maior que':\n            return parseInt(planet[column], 10) > parseInt(value, 10) && includesName;\n\n          case 'menor que':\n            return parseInt(planet[column], 10) < parseInt(value, 10) && includesName;\n\n          case 'igual a':\n            return parseInt(planet[column], 10) === parseInt(value, 10) && includesName;\n\n          default:\n            const ORDER_POSITIVE = 1;\n            const ORDER_NEGATIVE = -1;\n\n            const sortArray = (array, order) => [...array.sort((planetA, planetB) => {\n              let columnA = parseInt(planetA[order.column], 10) ? parseInt(planetA[order.column], 10) : planetA[order.column];\n              let columnB = parseInt(planetB[order.column], 10) ? parseInt(planetB[order.column], 10) : planetB[order.column];\n              if (columnA === 'unknown') columnA = Infinity;\n              if (columnB === 'unknown') columnB = Infinity;\n              if (columnA > columnB && order.sort === 'ASC') return ORDER_POSITIVE;\n              if (columnA < columnB && order.sort === 'ASC') return ORDER_NEGATIVE;\n              if (columnA > columnB && order.sort === 'DESC') return ORDER_NEGATIVE;\n              if (columnA < columnB && order.sort === 'DESC') return ORDER_POSITIVE;\n              return 0;\n            })];\n\n            return includesName;\n        }\n      });\n      const ordenado = ordenarr(filter, ordem);\n      setPlanets(ordenado);\n    });\n  }, [data, filters]);\n  const contextValues = {\n    planets,\n    setPlanets,\n    filters,\n    setFilters,\n    columns,\n    setColumns\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default PlanetsProvider;\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["/home/usuario/projetos/sd-08-project-starwars-planets-search/src/context/PlanetsProvider.js"],"names":["React","useEffect","useState","PropTypes","PlanetsContext","ORDER_POSITIVE","ORDER_NEGATIVE","sortArray","array","order","sort","planetA","planetB","columnA","parseInt","column","columnB","Infinity","initialColumns","filterOptions","filtrarPorNome","name","filtrarPorNumero","comparison","value","ordem","PlanetsProvider","children","data","setData","planets","setPlanets","filters","setFilters","columns","setColumns","fetch","then","response","json","result","results","forEach","filterValues","filter","planet","includesName","toLowerCase","includes","ordenado","ordenarr","contextValues","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nconst ORDER_POSITIVE = 1;\nconst ORDER_NEGATIVE = -1;\n\nconst sortArray = (array, order) => [\n  ...array.sort((planetA, planetB) => {\n    let columnA = parseInt(planetA[order.column], 10)\n      ? parseInt(planetA[order.column], 10)\n      : planetA[order.column];\n    let columnB = parseInt(planetB[order.column], 10)\n      ? parseInt(planetB[order.column], 10)\n      : planetB[order.column];\n    if (columnA === 'unknown') columnA = Infinity;\n    if (columnB === 'unknown') columnB = Infinity;\n    if (columnA > columnB && order.sort === 'ASC') return ORDER_POSITIVE;\n    if (columnA < columnB && order.sort === 'ASC') return ORDER_NEGATIVE;\n    if (columnA > columnB && order.sort === 'DESC') return ORDER_NEGATIVE;\n    if (columnA < columnB && order.sort === 'DESC') return ORDER_POSITIVE;\n    return 0;\n  }),\n];\n\nconst initialColumns = [\n  'rotation_period',\n  'orbital_period',\n  'diameter',\n  'surface_water',\n  'population',\n];\n\nconst filterOptions = {\n  filtrarPorNome: {\n    name: '',\n  },\n  filtrarPorNumero: [{\n    column: '',\n    comparison: '',\n    value: '',\n  }],\n  ordem: {\n    column: 'name',\n    sort: 'ASC',\n  },\n};\n\nfunction PlanetsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState(filterOptions);\n  const [columns, setColumns] = useState(initialColumns);\n\n  useEffect(() => {\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/').then((response) => response.json()).then((result) => setData(result.results));\n  }, [data]);\n\n  useEffect(() => {\n    const { filtrarPorNome: { name }, filtrarPorNumero, ordem } = filters;\n    filtrarPorNumero.forEach((filterValues) => {\n      const { column, comparison, value } = filterValues;\n      const filter = data.filter((planet) => {\n        const includesName = planet.name.toLowerCase().includes(name.toLowerCase());\n        switch (comparison) {\n        case ('maior que'):\n          return parseInt(planet[column], 10) > parseInt(value, 10) && includesName;\n        case ('menor que'):\n          return parseInt(planet[column], 10) < parseInt(value, 10) && includesName;\n        case ('igual a'):\n          return parseInt(planet[column], 10) === parseInt(value, 10) && includesName;\n        default:const ORDER_POSITIVE = 1;\n        const ORDER_NEGATIVE = -1;\n        \n        const sortArray = (array, order) => [\n          ...array.sort((planetA, planetB) => {\n            let columnA = parseInt(planetA[order.column], 10)\n              ? parseInt(planetA[order.column], 10)\n              : planetA[order.column];\n            let columnB = parseInt(planetB[order.column], 10)\n              ? parseInt(planetB[order.column], 10)\n              : planetB[order.column];\n            if (columnA === 'unknown') columnA = Infinity;\n            if (columnB === 'unknown') columnB = Infinity;\n            if (columnA > columnB && order.sort === 'ASC') return ORDER_POSITIVE;\n            if (columnA < columnB && order.sort === 'ASC') return ORDER_NEGATIVE;\n            if (columnA > columnB && order.sort === 'DESC') return ORDER_NEGATIVE;\n            if (columnA < columnB && order.sort === 'DESC') return ORDER_POSITIVE;\n            return 0;\n          }),\n        ];\n          return includesName;\n        }\n      });\n      const ordenado = ordenarr(filter, ordem);\n      setPlanets(ordenado);\n    });\n  }, [data, filters]);\n\n  const contextValues = { planets, setPlanets, filters, setFilters, columns, setColumns };\n\n  return (\n    <PlanetsContext.Provider value={ contextValues }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nexport default PlanetsProvider;\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}