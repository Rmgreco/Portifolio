{"ast":null,"code":"var _jsxFileName = \"/home/usuario/projetos/sd-08-project-starwars-planets-search/src/context/PlanetsProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    }\n  });\n  useEffect(() => {\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/').then(response => response.json()).then(result => setData(result.results));\n  }, [data]);\n  useEffect(() => {\n    const {\n      filterByName: {\n        name\n      }\n    } = filters;\n    const filter = data.filter(planet => planet.name.includes(name));\n    setPlanets(filter);\n    console.log('a');\n  }, [data, filters]);\n  const contextValues = {\n    planets,\n    setPlanets,\n    filters,\n    setFilters\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default PlanetsProvider;\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["/home/usuario/projetos/sd-08-project-starwars-planets-search/src/context/PlanetsProvider.js"],"names":["React","useEffect","useState","PropTypes","PlanetsContext","PlanetsProvider","children","data","setData","planets","setPlanets","filters","setFilters","filterByName","name","fetch","then","response","json","result","results","filter","planet","includes","console","log","contextValues","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC;AACrCW,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAE;AADM;AADuB,GAAD,CAAtC;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,KAAK,CAAC,gDAAD,CAAL,CAAwDC,IAAxD,CAA8DC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAA3E,EAA4FF,IAA5F,CAAkGG,MAAD,IAAYX,OAAO,CAACW,MAAM,CAACC,OAAR,CAApH;AACD,GAFQ,EAEN,CAACb,IAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEY,MAAAA,YAAY,EAAE;AAAEC,QAAAA;AAAF;AAAhB,QAA6BH,OAAnC;AACA,UAAMU,MAAM,GAAGd,IAAI,CAACc,MAAL,CAAaC,MAAD,IAAYA,MAAM,CAACR,IAAP,CAAYS,QAAZ,CAAqBT,IAArB,CAAxB,CAAf;AACAJ,IAAAA,UAAU,CAACW,MAAD,CAAV;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACD,GALQ,EAKN,CAAClB,IAAD,EAAOI,OAAP,CALM,CAAT;AAOA,QAAMe,aAAa,GAAG;AAAEjB,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,OAAvB;AAAgCC,IAAAA;AAAhC,GAAtB;AAEA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGc,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,QADH,CADF;AAKD;;AAED,eAAeD,eAAf;AAEAA,eAAe,CAACsB,SAAhB,GAA4B;AAC1BrB,EAAAA,QAAQ,EAAEH,SAAS,CAACyB,IAAV,CAAeC;AADC,CAA5B","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n  });\n\n  useEffect(() => {\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/').then((response) => response.json()).then((result) => setData(result.results));\n  }, [data]);\n\n  useEffect(() => {\n    const { filterByName: { name } } = filters;\n    const filter = data.filter((planet) => planet.name.includes(name));\n    setPlanets(filter);\n    console.log('a');\n  }, [data, filters]);\n\n  const contextValues = { planets, setPlanets, filters, setFilters };\n\n  return (\n    <PlanetsContext.Provider value={ contextValues }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nexport default PlanetsProvider;\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}