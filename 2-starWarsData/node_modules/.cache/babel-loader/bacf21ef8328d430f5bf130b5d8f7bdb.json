{"ast":null,"code":"var _jsxFileName = \"/home/usuario/projetos/sd-08-project-starwars-planets-search/src/context/PlanetsProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filtrarPorNome: {\n      name: ''\n    },\n    filtrarPorNumero: {\n      column: 'population',\n      comparison: 'maior que',\n      value: 0\n    }\n  });\n  useEffect(() => {\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/').then(response => response.json()).then(result => setData(result.results));\n  }, [data]);\n  useEffect(() => {\n    const {\n      filtrarPorNome: {\n        name\n      },\n      filtrarPorNumero: {\n        column,\n        comparison,\n        value\n      }\n    } = filters;\n    const filter = data.filter(planet => {\n      const includesName = planet.name.includes(name);\n\n      switch (comparison) {\n        case 'maior que':\n          return parseInt(planet[column], 10) > parseInt(value, 10) && includesName;\n\n        case 'menor que':\n          return parseInt(planet[column], 10) < parseInt(value, 10) && includesName;\n\n        case 'igual a':\n          return parseInt(planet[column], 10) === parseInt(value, 10) && includesName;\n\n        default:\n          return includesName;\n      }\n    });\n    setPlanets(filter);\n  }, [data, filters]);\n  const contextValues = {\n    planets,\n    setPlanets,\n    filters,\n    setFilters\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default PlanetsProvider;\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["/home/usuario/projetos/sd-08-project-starwars-planets-search/src/context/PlanetsProvider.js"],"names":["React","useEffect","useState","PropTypes","PlanetsContext","PlanetsProvider","children","data","setData","planets","setPlanets","filters","setFilters","filtrarPorNome","name","filtrarPorNumero","column","comparison","value","fetch","then","response","json","result","results","filter","planet","includesName","includes","parseInt","contextValues","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC;AACrCW,IAAAA,cAAc,EAAE;AACdC,MAAAA,IAAI,EAAE;AADQ,KADqB;AAIrCC,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,MAAM,EAAE,YADQ;AAEhBC,MAAAA,UAAU,EAAE,WAFI;AAGhBC,MAAAA,KAAK,EAAE;AAHS;AAJmB,GAAD,CAAtC;AAWAjB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,KAAK,CAAC,gDAAD,CAAL,CAAwDC,IAAxD,CAA8DC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAA3E,EAA4FF,IAA5F,CAAkGG,MAAD,IAAYf,OAAO,CAACe,MAAM,CAACC,OAAR,CAApH;AACD,GAFQ,EAEN,CAACjB,IAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AACJY,MAAAA,cAAc,EAAE;AAAEC,QAAAA;AAAF,OADZ;AAEJC,MAAAA,gBAAgB,EAAE;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,UAAV;AAAsBC,QAAAA;AAAtB;AAFd,QAGFP,OAHJ;AAIA,UAAMc,MAAM,GAAGlB,IAAI,CAACkB,MAAL,CAAaC,MAAD,IAAY;AACrC,YAAMC,YAAY,GAAGD,MAAM,CAACZ,IAAP,CAAYc,QAAZ,CAAqBd,IAArB,CAArB;;AACA,cAAQG,UAAR;AACA,aAAM,WAAN;AACE,iBAAOY,QAAQ,CAACH,MAAM,CAACV,MAAD,CAAP,EAAiB,EAAjB,CAAR,GAA+Ba,QAAQ,CAACX,KAAD,EAAQ,EAAR,CAAvC,IAAsDS,YAA7D;;AACF,aAAM,WAAN;AACE,iBAAOE,QAAQ,CAACH,MAAM,CAACV,MAAD,CAAP,EAAiB,EAAjB,CAAR,GAA+Ba,QAAQ,CAACX,KAAD,EAAQ,EAAR,CAAvC,IAAsDS,YAA7D;;AACF,aAAM,SAAN;AACE,iBAAOE,QAAQ,CAACH,MAAM,CAACV,MAAD,CAAP,EAAiB,EAAjB,CAAR,KAAiCa,QAAQ,CAACX,KAAD,EAAQ,EAAR,CAAzC,IAAwDS,YAA/D;;AACF;AACE,iBAAOA,YAAP;AARF;AAUD,KAZc,CAAf;AAaAjB,IAAAA,UAAU,CAACe,MAAD,CAAV;AACD,GAnBQ,EAmBN,CAAClB,IAAD,EAAOI,OAAP,CAnBM,CAAT;AAqBA,QAAMmB,aAAa,GAAG;AAAErB,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,OAAvB;AAAgCC,IAAAA;AAAhC,GAAtB;AAEA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGkB,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,QADH,CADF;AAKD;;AAED,eAAeD,eAAf;AAEAA,eAAe,CAAC0B,SAAhB,GAA4B;AAC1BzB,EAAAA,QAAQ,EAAEH,SAAS,CAAC6B,IAAV,CAAeC;AADC,CAA5B","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filtrarPorNome: {\n      name: '',\n    },\n    filtrarPorNumero: {\n      column: 'population',\n      comparison: 'maior que',\n      value: 0,\n    },\n  });\n\n  useEffect(() => {\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/').then((response) => response.json()).then((result) => setData(result.results));\n  }, [data]);\n\n  useEffect(() => {\n    const {\n      filtrarPorNome: { name },\n      filtrarPorNumero: { column, comparison, value },\n    } = filters;\n    const filter = data.filter((planet) => {\n      const includesName = planet.name.includes(name);\n      switch (comparison) {\n      case ('maior que'):\n        return parseInt(planet[column], 10) > parseInt(value, 10) && includesName;\n      case ('menor que'):\n        return parseInt(planet[column], 10) < parseInt(value, 10) && includesName;\n      case ('igual a'):\n        return parseInt(planet[column], 10) === parseInt(value, 10) && includesName;\n      default:\n        return includesName;\n      }\n    });\n    setPlanets(filter);\n  }, [data, filters]);\n\n  const contextValues = { planets, setPlanets, filters, setFilters };\n\n  return (\n    <PlanetsContext.Provider value={ contextValues }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nexport default PlanetsProvider;\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}