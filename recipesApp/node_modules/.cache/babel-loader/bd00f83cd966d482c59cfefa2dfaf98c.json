{"ast":null,"code":"var _jsxFileName = \"/home/usuario/projetos/sd-08-project-recipes-app/src/components/Header.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchIngredient as fetchIngredientAction } from '../action';\nimport ProfileIcon from \"../images/profileIcon.svg\";\nimport SearchIcon from \"../images/searchIcon.svg\";\nimport './Components.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isHidden: false,\n      searchBy: '',\n      text: ''\n    };\n    this.showSearchBar = this.showSearchBar.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitSearch = this.submitSearch.bind(this);\n  }\n\n  handleChange({\n    target\n  }) {\n    if (target.type === 'radio') this.setState({\n      searchBy: target.value\n    });\n    if (target.type === 'text') this.setState({\n      text: target.value\n    });\n  }\n\n  showSearchBar() {\n    const {\n      isHidden\n    } = this.state;\n    this.setState({\n      isHidden: !isHidden\n    });\n  }\n\n  submitSearch(searchIngredient) {\n    const {\n      params: {\n        url: {\n          byIngredient,\n          byName,\n          byFirstLetter\n        }\n      }\n    } = this.props;\n    const {\n      text,\n      searchBy\n    } = this.state;\n    if (text === '') return;\n\n    if (searchBy === 'ingredient') {\n      const url = byIngredient + text;\n      return searchIngredient(url);\n    }\n\n    if (searchBy === 'name') {\n      const url = byName + text;\n      return searchIngredient(url);\n    }\n\n    if (text.length > 1) {\n      return alert('Sua busca deve conter somente 1 (um) caracter');\n    }\n\n    const url = byFirstLetter + text;\n    return searchIngredient(url);\n  }\n\n  toggleSearchBar() {\n    const {\n      text\n    } = this.state;\n    const {\n      searchIngredient\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"teste\",\n      \"data-testid\": \"search-input\",\n      type: \"text\",\n      name: \"search-input\",\n      id: \"search-input\",\n      value: text,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"ingrediente\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"radio-search\",\n      id: \"ingredient\",\n      onChange: this.handleChange,\n      value: \"ingredient\",\n      \"data-testid\": \"ingredient-search-radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }), \"Ingrediente\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"radio-search\",\n      id: \"name\",\n      onChange: this.handleChange,\n      value: \"name\",\n      \"data-testid\": \"name-search-radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }), \"Nome\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"first-letter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"radio-search\",\n      id: \"first-letter\",\n      onChange: this.handleChange,\n      value: \"first-letter\",\n      \"data-testid\": \"first-letter-search-radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }), \"Primeira Letra\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"exec-search-btn\",\n      onClick: () => this.submitSearch(searchIngredient),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, ' ', \"Buscar\"));\n  }\n\n  render() {\n    const {\n      params: {\n        name\n      }\n    } = this.props;\n    const {\n      isHidden\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/perfil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      \"data-testid\": \"profile-top-btn\",\n      src: ProfileIcon,\n      alt: \"Profile icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"h1\", {\n      \"data-testid\": \"page-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, name), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.showSearchBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      \"data-testid\": \"search-top-btn\",\n      src: SearchIcon,\n      alt: \"Search Icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }))), isHidden && this.toggleSearchBar());\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  searchIngredient: url => dispatch(fetchIngredientAction(url))\n});\n\nexport default connect(null, mapDispatchToProps)(Header);\nHeader.propTypes = {\n  params: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    url: PropTypes.shape({\n      byIngredient: PropTypes.string.isRequired,\n      byName: PropTypes.string.isRequired,\n      byFirstLetter: PropTypes.string.isRequired\n    }).isRequired\n  }).isRequired,\n  searchIngredient: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/usuario/projetos/sd-08-project-recipes-app/src/components/Header.js"],"names":["React","Component","Link","PropTypes","connect","fetchIngredient","fetchIngredientAction","Header","constructor","state","isHidden","searchBy","text","showSearchBar","bind","handleChange","submitSearch","target","type","setState","value","searchIngredient","params","url","byIngredient","byName","byFirstLetter","props","length","alert","toggleSearchBar","render","name","ProfileIcon","SearchIcon","mapDispatchToProps","dispatch","propTypes","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { fetchIngredient as fetchIngredientAction } from '../action';\n\nimport ProfileIcon from '../images/profileIcon.svg';\nimport SearchIcon from '../images/searchIcon.svg';\nimport './Components.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isHidden: false,\n      searchBy: '',\n      text: '',\n\n    };\n\n    this.showSearchBar = this.showSearchBar.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitSearch = this.submitSearch.bind(this);\n  }\n\n  handleChange({ target }) {\n    if (target.type === 'radio') this.setState({ searchBy: target.value });\n    if (target.type === 'text') this.setState({ text: target.value });\n  }\n\n  showSearchBar() {\n    const { isHidden } = this.state;\n    this.setState({ isHidden: !isHidden });\n  }\n\n  submitSearch(searchIngredient) {\n    const { params: { url: { byIngredient, byName, byFirstLetter } } } = this.props;\n    const { text, searchBy } = this.state;\n    if (text === '') return;\n    if (searchBy === 'ingredient') {\n      const url = byIngredient + text;\n      return searchIngredient(url);\n    } if (searchBy === 'name') {\n      const url = byName + text;\n      return searchIngredient(url);\n    }\n    if (text.length > 1) {\n      return alert('Sua busca deve conter somente 1 (um) caracter');\n    }\n    const url = byFirstLetter + text;\n    return searchIngredient(url);\n  }\n\n  toggleSearchBar() {\n    const { text } = this.state;\n    const { searchIngredient } = this.props;\n    return (\n      <>\n        <label htmlFor=\"search-input\">\n          <input\n          className=\"teste\"\n            data-testid=\"search-input\"\n            type=\"text\"\n            name=\"search-input\"\n            id=\"search-input\"\n            value={ text }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"ingrediente\">\n          <input\n            type=\"radio\"\n            name=\"radio-search\"\n            id=\"ingredient\"\n            onChange={ this.handleChange }\n            value=\"ingredient\"\n            data-testid=\"ingredient-search-radio\"\n          />\n          Ingrediente\n        </label>\n        <label htmlFor=\"name\">\n          <input\n            type=\"radio\"\n            name=\"radio-search\"\n            id=\"name\"\n            onChange={ this.handleChange }\n            value=\"name\"\n            data-testid=\"name-search-radio\"\n          />\n          Nome\n        </label>\n        <label htmlFor=\"first-letter\">\n          <input\n            type=\"radio\"\n            name=\"radio-search\"\n            id=\"first-letter\"\n            onChange={ this.handleChange }\n            value=\"first-letter\"\n            data-testid=\"first-letter-search-radio\"\n          />\n          Primeira Letra\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"exec-search-btn\"\n          onClick={ () => this.submitSearch(searchIngredient) }\n        >\n          {' '}\n          Buscar\n        </button>\n      </>\n    );\n  }\n\n  render() {\n    const { params: { name } } = this.props;\n    const { isHidden } = this.state;\n\n    return (\n      <>\n        <nav className=\"header\">\n          <Link to=\"/perfil\">\n            <img data-testid=\"profile-top-btn\" src={ ProfileIcon } alt=\"Profile icon\" />\n          </Link>\n          <h1 data-testid=\"page-title\">{name}</h1>\n          <button\n            type=\"button\"\n            onClick={ this.showSearchBar }\n          >\n            <img data-testid=\"search-top-btn\" src={ SearchIcon } alt=\"Search Icon\" />\n          </button>\n        </nav>\n        {isHidden && this.toggleSearchBar()}\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  searchIngredient: (url) => dispatch(fetchIngredientAction(url)),\n});\n\nexport default connect(null, mapDispatchToProps)(Header);\n\nHeader.propTypes = {\n  params: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    url: PropTypes.shape({\n      byIngredient: PropTypes.string.isRequired,\n      byName: PropTypes.string.isRequired,\n      byFirstLetter: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  searchIngredient: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}